{"sourcePath":"imports/ui/AlertMessageForm.svelte","path":"imports/ui/AlertMessageForm.svelte","data":"!function (module1) {\n  let SvelteComponentDev, add_location, append_dev, attr_dev, detach_dev, dispatch_dev, element, globals, init, insert_dev, listen_dev, noop, prevent_default, run_all, safe_not_equal, set_input_value, space, validate_slots;\n  module1.link(\"svelte/internal\", {\n    SvelteComponentDev(v) {\n      SvelteComponentDev = v;\n    },\n\n    add_location(v) {\n      add_location = v;\n    },\n\n    append_dev(v) {\n      append_dev = v;\n    },\n\n    attr_dev(v) {\n      attr_dev = v;\n    },\n\n    detach_dev(v) {\n      detach_dev = v;\n    },\n\n    dispatch_dev(v) {\n      dispatch_dev = v;\n    },\n\n    element(v) {\n      element = v;\n    },\n\n    globals(v) {\n      globals = v;\n    },\n\n    init(v) {\n      init = v;\n    },\n\n    insert_dev(v) {\n      insert_dev = v;\n    },\n\n    listen_dev(v) {\n      listen_dev = v;\n    },\n\n    noop(v) {\n      noop = v;\n    },\n\n    prevent_default(v) {\n      prevent_default = v;\n    },\n\n    run_all(v) {\n      run_all = v;\n    },\n\n    safe_not_equal(v) {\n      safe_not_equal = v;\n    },\n\n    set_input_value(v) {\n      set_input_value = v;\n    },\n\n    space(v) {\n      space = v;\n    },\n\n    validate_slots(v) {\n      validate_slots = v;\n    }\n\n  }, 0);\n  let iFrameLoaded;\n  module1.link(\"./stores\", {\n    iFrameLoaded(v) {\n      iFrameLoaded = v;\n    }\n\n  }, 1);\n\n  let ___SVELTE_HMR_HOT_API;\n\n  module1.link(\"meteor/zodern:melte/hmr-runtime.js\", {\n    \"*\"(v) {\n      ___SVELTE_HMR_HOT_API = v;\n    }\n\n  }, 2);\n\n  let ___SVELTE_HMR_HOT_API_PROXY_ADAPTER;\n\n  module1.link(\"meteor/zodern:melte/proxy-adapter.js\", {\n    adapter(v) {\n      ___SVELTE_HMR_HOT_API_PROXY_ADAPTER = v;\n    }\n\n  }, 3);\n  const {\n    console: console_1\n  } = globals;\n  const file = \"imports/ui/AlertMessageForm.svelte\";\n\n  function create_fragment(ctx) {\n    let div;\n    let form;\n    let label;\n    let t1;\n    let br;\n    let t2;\n    let input;\n    let t3;\n    let button;\n    let mounted;\n    let dispose;\n    const block = {\n      c: function create() {\n        div = element(\"div\");\n        form = element(\"form\");\n        label = element(\"label\");\n        label.textContent = \"Send a message to alert on the child app:\";\n        t1 = space();\n        br = element(\"br\");\n        t2 = space();\n        input = element(\"input\");\n        t3 = space();\n        button = element(\"button\");\n        button.textContent = \"Send Message\";\n        attr_dev(label, \"for\", \"html\");\n        add_location(label, file, 20, 8, 669);\n        add_location(br, file, 21, 8, 746);\n        attr_dev(input, \"type\", \"text\");\n        attr_dev(input, \"name\", \"text\");\n        attr_dev(input, \"placeholder\", \"Type message to send\");\n        add_location(input, file, 22, 8, 761);\n        attr_dev(button, \"type\", \"submit\");\n        add_location(button, file, 23, 8, 870);\n        add_location(form, file, 19, 4, 614);\n        add_location(div, file, 18, 0, 604);\n      },\n      l: function claim(nodes) {\n        throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n      },\n      m: function mount(target, anchor) {\n        insert_dev(target, div, anchor);\n        append_dev(div, form);\n        append_dev(form, label);\n        append_dev(form, t1);\n        append_dev(form, br);\n        append_dev(form, t2);\n        append_dev(form, input);\n        set_input_value(input,\n        /*outgoingMessageText*/\n        ctx[0]);\n        append_dev(form, t3);\n        append_dev(form, button);\n\n        if (!mounted) {\n          dispose = [listen_dev(input, \"input\",\n          /*input_input_handler*/\n          ctx[2]), listen_dev(form, \"submit\", prevent_default(\n          /*handleSubmit*/\n          ctx[1]), false, true, false)];\n          mounted = true;\n        }\n      },\n      p: function update(ctx, _ref) {\n        let [dirty] = _ref;\n\n        if (dirty &\n        /*outgoingMessageText*/\n        1 && input.value !==\n        /*outgoingMessageText*/\n        ctx[0]) {\n          set_input_value(input,\n          /*outgoingMessageText*/\n          ctx[0]);\n        }\n      },\n      i: noop,\n      o: noop,\n      d: function destroy(detaching) {\n        if (detaching) detach_dev(div);\n        mounted = false;\n        run_all(dispose);\n      }\n    };\n    dispatch_dev(\"SvelteRegisterBlock\", {\n      block,\n      id: create_fragment.name,\n      type: \"component\",\n      source: \"\",\n      ctx\n    });\n    return block;\n  }\n\n  function instance($$self, $$props, $$invalidate) {\n    let outgoingMessageText;\n    let {\n      $$slots: slots = {},\n      $$scope\n    } = $$props;\n    validate_slots('AlertMessageForm', slots, []);\n\n    const handleSubmit = () => {\n      //check that iFrame has loaded before accessing it and sending message\n      if (iFrameLoaded) {\n        console.log('Sending message to display from parent to child!');\n        document.getElementById('iframe').contentWindow.postMessage({\n          function: 'alertMessage',\n          args: {\n            messageText: outgoingMessageText\n          }\n        }, \"http://localhost:3000/\");\n      } else {\n        throw new Meteor.Error('iFrame not loaded yet!');\n      }\n    };\n\n    const writable_props = [];\n    Object.keys($$props).forEach(key => {\n      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(\"<AlertMessageForm> was created with unknown prop '\".concat(key, \"'\"));\n    });\n\n    function input_input_handler() {\n      outgoingMessageText = this.value;\n      $$invalidate(0, outgoingMessageText);\n    }\n\n    $$self.$capture_state = () => ({\n      iFrameLoaded,\n      handleSubmit,\n      outgoingMessageText\n    });\n\n    $$self.$inject_state = $$props => {\n      if ('outgoingMessageText' in $$props) $$invalidate(0, outgoingMessageText = $$props.outgoingMessageText);\n    };\n\n    if ($$props && \"$$inject\" in $$props) {\n      $$self.$inject_state($$props.$$inject);\n    }\n\n    $: $$invalidate(0, outgoingMessageText = \"\");\n\n    return [outgoingMessageText, handleSubmit, input_input_handler];\n  }\n\n  class AlertMessageForm extends SvelteComponentDev {\n    constructor(options) {\n      super(options);\n      init(this, options, instance, create_fragment, safe_not_equal, {});\n      dispatch_dev(\"SvelteRegisterComponent\", {\n        component: this,\n        tagName: \"AlertMessageForm\",\n        options,\n        id: create_fragment.name\n      });\n    }\n\n  }\n\n  if (module && module.hot) {\n    AlertMessageForm = ___SVELTE_HMR_HOT_API.applyHmr({\n      m: module,\n      id: \"imports/ui/AlertMessageForm.svelte\",\n      hotOptions: {\n        \"preserveLocalState\": false,\n        \"noPreserveStateKey\": [\"@hmr:reset\", \"@!hmr\"],\n        \"preserveAllLocalStateKey\": \"@hmr:keep-all\",\n        \"preserveLocalStateKey\": \"@hmr:keep\",\n        \"noReload\": false,\n        \"optimistic\": true,\n        \"acceptNamedExports\": true,\n        \"acceptAccessors\": true,\n        \"injectCss\": true,\n        \"cssEjectDelay\": 100,\n        \"native\": false,\n        \"importAdapterName\": \"___SVELTE_HMR_HOT_API_PROXY_ADAPTER\",\n        \"noOverlay\": false\n      },\n      Component: AlertMessageForm,\n      ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER,\n      acceptable: true,\n      preserveLocalState: false,\n      cssId: undefined,\n      nonCssHash: undefined,\n      ignoreCss: false\n    });\n  }\n\n  module1.exportDefault(AlertMessageForm);\n}.call(this, module);","sourceMap":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":[]}}