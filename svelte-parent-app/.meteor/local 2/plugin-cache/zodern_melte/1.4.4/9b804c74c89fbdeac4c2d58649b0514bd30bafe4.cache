{"sourcePath":"imports/ui/App.svelte","path":"imports/ui/App.svelte","data":"var _assertThisInitialized;\n\nmodule.link(\"@babel/runtime/helpers/assertThisInitialized\", {\n  default: function (v) {\n    _assertThisInitialized = v;\n  }\n}, 0);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\n\nvar _slicedToArray;\n\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 2);\nvar SvelteComponentDev, add_location, append_dev, attr_dev, create_component, destroy_component, detach_dev, dispatch_dev, element, globals, init, insert_dev, listen_dev, mount_component, noop, safe_not_equal, set_data_dev, space, src_url_equal, text, transition_in, transition_out, validate_slots;\nmodule.link(\"svelte/internal\", {\n  SvelteComponentDev: function (v) {\n    SvelteComponentDev = v;\n  },\n  add_location: function (v) {\n    add_location = v;\n  },\n  append_dev: function (v) {\n    append_dev = v;\n  },\n  attr_dev: function (v) {\n    attr_dev = v;\n  },\n  create_component: function (v) {\n    create_component = v;\n  },\n  destroy_component: function (v) {\n    destroy_component = v;\n  },\n  detach_dev: function (v) {\n    detach_dev = v;\n  },\n  dispatch_dev: function (v) {\n    dispatch_dev = v;\n  },\n  element: function (v) {\n    element = v;\n  },\n  globals: function (v) {\n    globals = v;\n  },\n  init: function (v) {\n    init = v;\n  },\n  insert_dev: function (v) {\n    insert_dev = v;\n  },\n  listen_dev: function (v) {\n    listen_dev = v;\n  },\n  mount_component: function (v) {\n    mount_component = v;\n  },\n  noop: function (v) {\n    noop = v;\n  },\n  safe_not_equal: function (v) {\n    safe_not_equal = v;\n  },\n  set_data_dev: function (v) {\n    set_data_dev = v;\n  },\n  space: function (v) {\n    space = v;\n  },\n  src_url_equal: function (v) {\n    src_url_equal = v;\n  },\n  text: function (v) {\n    text = v;\n  },\n  transition_in: function (v) {\n    transition_in = v;\n  },\n  transition_out: function (v) {\n    transition_out = v;\n  },\n  validate_slots: function (v) {\n    validate_slots = v;\n  }\n}, 0);\nvar DisplayMessageForm;\nmodule.link(\"./DisplayMessageForm\", {\n  \"default\": function (v) {\n    DisplayMessageForm = v;\n  }\n}, 1);\nvar iFrameLoaded;\nmodule.link(\"/stores\", {\n  iFrameLoaded: function (v) {\n    iFrameLoaded = v;\n  }\n}, 2);\nvar _globals = globals,\n    console_1 = _globals.console;\nvar file = \"imports/ui/App.svelte\"; // (33:2) {:else}\n\nfunction create_else_block(ctx) {\n  var h2;\n  var t0;\n  var t1;\n  var block = {\n    c: function () {\n      function create() {\n        h2 = element(\"h2\");\n        t0 = text(\"Message received: \");\n        t1 = text(\n        /*incomingMessageText*/\n        ctx[0]);\n        add_location(h2, file, 33, 4, 844);\n      }\n\n      return create;\n    }(),\n    m: function () {\n      function mount(target, anchor) {\n        insert_dev(target, h2, anchor);\n        append_dev(h2, t0);\n        append_dev(h2, t1);\n      }\n\n      return mount;\n    }(),\n    p: function () {\n      function update(ctx, dirty) {\n        if (dirty &\n        /*incomingMessageText*/\n        1) set_data_dev(t1,\n        /*incomingMessageText*/\n        ctx[0]);\n      }\n\n      return update;\n    }(),\n    d: function () {\n      function destroy(detaching) {\n        if (detaching) detach_dev(h2);\n      }\n\n      return destroy;\n    }()\n  };\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_else_block.name,\n    type: \"else\",\n    source: \"(33:2) {:else}\",\n    ctx: ctx\n  });\n  return block;\n} // (31:2) {#if (!incomingMessageText)}\n\n\nfunction create_if_block(ctx) {\n  var h2;\n  var block = {\n    c: function () {\n      function create() {\n        h2 = element(\"h2\");\n        h2.textContent = \"Listening for messages...\";\n        add_location(h2, file, 31, 4, 795);\n      }\n\n      return create;\n    }(),\n    m: function () {\n      function mount(target, anchor) {\n        insert_dev(target, h2, anchor);\n      }\n\n      return mount;\n    }(),\n    p: noop,\n    d: function () {\n      function destroy(detaching) {\n        if (detaching) detach_dev(h2);\n      }\n\n      return destroy;\n    }()\n  };\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_if_block.name,\n    type: \"if\",\n    source: \"(31:2) {#if (!incomingMessageText)}\",\n    ctx: ctx\n  });\n  return block;\n}\n\nfunction create_fragment(ctx) {\n  var div;\n  var h1;\n  var t1;\n  var t2;\n  var displaymessageform;\n  var t3;\n  var iframe;\n  var iframe_src_value;\n  var current;\n  var mounted;\n  var dispose;\n\n  function select_block_type(ctx, dirty) {\n    if (!\n    /*incomingMessageText*/\n    ctx[0]) return create_if_block;\n    return create_else_block;\n  }\n\n  var current_block_type = select_block_type(ctx, -1);\n  var if_block = current_block_type(ctx);\n  displaymessageform = new DisplayMessageForm({\n    $$inline: true\n  });\n  var block = {\n    c: function () {\n      function create() {\n        div = element(\"div\");\n        h1 = element(\"h1\");\n        h1.textContent = \"Svelte Parent App\";\n        t1 = space();\n        if_block.c();\n        t2 = space();\n        create_component(displaymessageform.$$.fragment);\n        t3 = space();\n        iframe = element(\"iframe\");\n        add_location(h1, file, 29, 2, 733);\n        attr_dev(iframe, \"id\", \"iframe\");\n        attr_dev(iframe, \"title\", \"react-child-app\");\n        if (!src_url_equal(iframe.src, iframe_src_value = \"http://localhost:3000/\")) attr_dev(iframe, \"src\", iframe_src_value);\n        attr_dev(iframe, \"sandbox\", \"allow-same-origin allow-scripts allow-forms allow-top-navigation\");\n        add_location(iframe, file, 38, 2, 930);\n        attr_dev(div, \"class\", \"container\");\n        add_location(div, file, 28, 0, 707);\n      }\n\n      return create;\n    }(),\n    l: function () {\n      function claim(nodes) {\n        throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n      }\n\n      return claim;\n    }(),\n    m: function () {\n      function mount(target, anchor) {\n        insert_dev(target, div, anchor);\n        append_dev(div, h1);\n        append_dev(div, t1);\n        if_block.m(div, null);\n        append_dev(div, t2);\n        mount_component(displaymessageform, div, null);\n        append_dev(div, t3);\n        append_dev(div, iframe);\n        current = true;\n\n        if (!mounted) {\n          dispose = listen_dev(iframe, \"load\",\n          /*oniFrameLoad*/\n          ctx[1], false, false, false);\n          mounted = true;\n        }\n      }\n\n      return mount;\n    }(),\n    p: function () {\n      function update(ctx, _ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            dirty = _ref2[0];\n\n        if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {\n          if_block.p(ctx, dirty);\n        } else {\n          if_block.d(1);\n          if_block = current_block_type(ctx);\n\n          if (if_block) {\n            if_block.c();\n            if_block.m(div, t2);\n          }\n        }\n      }\n\n      return update;\n    }(),\n    i: function () {\n      function intro(local) {\n        if (current) return;\n        transition_in(displaymessageform.$$.fragment, local);\n        current = true;\n      }\n\n      return intro;\n    }(),\n    o: function () {\n      function outro(local) {\n        transition_out(displaymessageform.$$.fragment, local);\n        current = false;\n      }\n\n      return outro;\n    }(),\n    d: function () {\n      function destroy(detaching) {\n        if (detaching) detach_dev(div);\n        if_block.d();\n        destroy_component(displaymessageform);\n        mounted = false;\n        dispose();\n      }\n\n      return destroy;\n    }()\n  };\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx: ctx\n  });\n  return block;\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n  var incomingMessageText;\n  var _$$props$$$slots = $$props.$$slots,\n      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,\n      $$scope = $$props.$$scope;\n  validate_slots('App', slots, []);\n\n  var oniFrameLoad = function () {\n    iFrameLoaded.update(true);\n\n    if (iFrameLoaded) {\n      console.log('child iFrame loaded, logging from parent!');\n    }\n  }; //event listeners to receive messages from child and update message text\n\n\n  window.addEventListener(\"message\", function (message) {\n    if (message.origin === \"http://localhost:3000\") {\n      console.log(\"incoming messsage in parent from child!\");\n      console.log(message);\n      $$invalidate(0, incomingMessageText = message.data);\n    }\n  });\n  var writable_props = [];\n  Object.keys($$props).forEach(function (key) {\n    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(\"<App> was created with unknown prop '\" + key + \"'\");\n  });\n\n  $$self.$capture_state = function () {\n    return {\n      DisplayMessageForm: DisplayMessageForm,\n      iFrameLoaded: iFrameLoaded,\n      oniFrameLoad: oniFrameLoad,\n      incomingMessageText: incomingMessageText\n    };\n  };\n\n  $$self.$inject_state = function ($$props) {\n    if ('incomingMessageText' in $$props) $$invalidate(0, incomingMessageText = $$props.incomingMessageText);\n  };\n\n  if ($$props && \"$$inject\" in $$props) {\n    $$self.$inject_state($$props.$$inject);\n  }\n\n  $: $$invalidate(0, incomingMessageText = \"\");\n\n  return [incomingMessageText, oniFrameLoad];\n}\n\nvar App = /*#__PURE__*/function (_SvelteComponentDev) {\n  _inheritsLoose(App, _SvelteComponentDev);\n\n  function App(options) {\n    var _this;\n\n    _this = _SvelteComponentDev.call(this, options) || this;\n    init(_assertThisInitialized(_this), options, instance, create_fragment, safe_not_equal, {});\n    dispatch_dev(\"SvelteRegisterComponent\", {\n      component: _assertThisInitialized(_this),\n      tagName: \"App\",\n      options: options,\n      id: create_fragment.name\n    });\n    return _this;\n  }\n\n  return App;\n}(SvelteComponentDev);\n\nmodule.exportDefault(App);","sourceMap":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":[]}}