{"sourcePath":"imports/api/ChildToParentAPI.svelte","path":"imports/api/ChildToParentAPI.svelte","data":"!function (module1) {\n  let SvelteComponentDev, component_subscribe, dispatch_dev, globals, init, noop, safe_not_equal, validate_slots, validate_store;\n  module1.link(\"svelte/internal\", {\n    SvelteComponentDev(v) {\n      SvelteComponentDev = v;\n    },\n\n    component_subscribe(v) {\n      component_subscribe = v;\n    },\n\n    dispatch_dev(v) {\n      dispatch_dev = v;\n    },\n\n    globals(v) {\n      globals = v;\n    },\n\n    init(v) {\n      init = v;\n    },\n\n    noop(v) {\n      noop = v;\n    },\n\n    safe_not_equal(v) {\n      safe_not_equal = v;\n    },\n\n    validate_slots(v) {\n      validate_slots = v;\n    },\n\n    validate_store(v) {\n      validate_store = v;\n    }\n\n  }, 0);\n  let PARENT_URL, CHILD_URL;\n  module1.link(\"/public/constants\", {\n    PARENT_URL(v) {\n      PARENT_URL = v;\n    },\n\n    CHILD_URL(v) {\n      CHILD_URL = v;\n    }\n\n  }, 1);\n  let incomingMessageText, count;\n  module1.link(\"/imports/api/stores\", {\n    incomingMessageText(v) {\n      incomingMessageText = v;\n    },\n\n    count(v) {\n      count = v;\n    }\n\n  }, 2);\n\n  let ___SVELTE_HMR_HOT_API;\n\n  module1.link(\"meteor/zodern:melte/hmr-runtime.js\", {\n    \"*\"(v) {\n      ___SVELTE_HMR_HOT_API = v;\n    }\n\n  }, 3);\n\n  let ___SVELTE_HMR_HOT_API_PROXY_ADAPTER;\n\n  module1.link(\"meteor/zodern:melte/proxy-adapter.js\", {\n    adapter(v) {\n      ___SVELTE_HMR_HOT_API_PROXY_ADAPTER = v;\n    }\n\n  }, 4);\n  const {\n    Error: Error_1,\n    console: console_1\n  } = globals;\n  const file = \"imports/api/ChildToParentAPI.svelte\";\n\n  function create_fragment(ctx) {\n    const block = {\n      c: noop,\n      l: function claim(nodes) {\n        throw new Error_1(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n      },\n      m: noop,\n      p: noop,\n      i: noop,\n      o: noop,\n      d: noop\n    };\n    dispatch_dev(\"SvelteRegisterBlock\", {\n      block,\n      id: create_fragment.name,\n      type: \"component\",\n      source: \"\",\n      ctx\n    });\n    return block;\n  }\n\n  function alertMessage(args) {\n    //sanity check\n    console.log(\"alertMessage function triggered on parent with args \".concat(args, \"!\")); //check args and alert\n\n    if (typeof args.messageText === \"string\") {\n      alert(args.messageText);\n    }\n  }\n\n  function instance($$self, $$props, $$invalidate) {\n    let $count;\n    validate_store(count, 'count');\n    component_subscribe($$self, count, $$value => $$invalidate(0, $count = $$value));\n    let {\n      $$slots: slots = {},\n      $$scope\n    } = $$props;\n    validate_slots('ChildToParentAPI', slots, []);\n\n    function displayMessage(args) {\n      //sanity check\n      console.log(\"displayMessage function triggered on parent with args \".concat(args, \"!\")); //check messageText is string\n\n      if (typeof args.messageText === \"string\") {\n        incomingMessageText.set(args.messageText);\n      }\n    } //function that increments count\n\n\n    const incrementCount = () => {\n      console.log(\"incrementCount function triggered on parent!\");\n      console.log($count);\n      count.set($count + 1);\n    }; //function that decrements count\n\n\n    const decrementCount = () => {\n      console.log(\"decrementCount function triggered on parent!\");\n      count.set($count - 1);\n    }; //message handler\n\n\n    window.addEventListener(\"message\", function (message) {\n      //function adapter\n      const functionAdapter = {\n        displayMessage,\n        alertMessage,\n        incrementCount,\n        decrementCount\n      };\n\n      if (message.origin === CHILD_URL) {\n        //sanity check\n        console.log(\"incoming message in parent MessageHandler from child!\");\n        console.log(message); //parse input\n\n        functionName = message.data.function;\n        args = message.data.args; //call appropriate function\n\n        if (functionAdapter[functionName]) {\n          functionAdapter[functionName](args);\n        } else {\n          throw new Error(\"invalid function name\");\n        }\n      } else if (message.origin === PARENT_URL) {\n        //sanity check\n        console.log(\"incoming message in parent MessageHandler from own URL\");\n      } else {\n        //permission denied\n        throw new Error(\"invalid parent URL, permission denied\");\n      }\n    });\n    const writable_props = [];\n    Object.keys($$props).forEach(key => {\n      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(\"<ChildToParentAPI> was created with unknown prop '\".concat(key, \"'\"));\n    });\n\n    $$self.$capture_state = () => ({\n      PARENT_URL,\n      CHILD_URL,\n      incomingMessageText,\n      count,\n      displayMessage,\n      alertMessage,\n      incrementCount,\n      decrementCount,\n      $count\n    });\n\n    return [];\n  }\n\n  class ChildToParentAPI extends SvelteComponentDev {\n    constructor(options) {\n      super(options);\n      init(this, options, instance, create_fragment, safe_not_equal, {});\n      dispatch_dev(\"SvelteRegisterComponent\", {\n        component: this,\n        tagName: \"ChildToParentAPI\",\n        options,\n        id: create_fragment.name\n      });\n    }\n\n  }\n\n  if (module && module.hot) {\n    ChildToParentAPI = ___SVELTE_HMR_HOT_API.applyHmr({\n      m: module,\n      id: \"imports/api/ChildToParentAPI.svelte\",\n      hotOptions: {\n        \"preserveLocalState\": false,\n        \"noPreserveStateKey\": [\"@hmr:reset\", \"@!hmr\"],\n        \"preserveAllLocalStateKey\": \"@hmr:keep-all\",\n        \"preserveLocalStateKey\": \"@hmr:keep\",\n        \"noReload\": false,\n        \"optimistic\": true,\n        \"acceptNamedExports\": true,\n        \"acceptAccessors\": true,\n        \"injectCss\": true,\n        \"cssEjectDelay\": 100,\n        \"native\": false,\n        \"importAdapterName\": \"___SVELTE_HMR_HOT_API_PROXY_ADAPTER\",\n        \"noOverlay\": false\n      },\n      Component: ChildToParentAPI,\n      ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER,\n      acceptable: true,\n      preserveLocalState: false,\n      cssId: undefined,\n      nonCssHash: undefined,\n      ignoreCss: false\n    });\n  }\n\n  module1.exportDefault(ChildToParentAPI);\n}.call(this, module);","sourceMap":{"version":3,"sources":["ChildToParentAPI.svelte"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAgB0B;;WAExB,CAAA,kEAAW,YAFa;;;;;;;;;;;;;;;;;4BAXH,MAAA;;aAErB,CAAQ,oEAAA,YAFa;;iBAKV,IAAA,CAAA,gBAAgB,UAAa;2BACtC,CAAA,IAAA,IAAA,CAAA;;;;;;AAiBF,MAAA,OAAA,CAAA,GAAA,CAAA,8CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,MAAA","sourcesContent":["<script>\nimport { PARENT_URL, CHILD_URL } from \"/public/constants\";\nimport { incomingMessageText, count } from \"/imports/api/stores\";\n\n//function that displays message, takes in a \"messageText\" argument\nfunction displayMessage(args) {\n  //sanity check\n  console.log(`displayMessage function triggered on parent with args ${args}!`);\n\n  //check messageText is string\n  if (typeof args.messageText === \"string\") {\n    incomingMessageText.set(args.messageText);\n  }\n}\n\n//function that alerts message, takes in a \"messageText\" argument\nfunction alertMessage(args) {\n  //sanity check\n  console.log(`alertMessage function triggered on parent with args ${args}!`);\n\n  //check args and alert\n  if (typeof args.messageText === \"string\") {\n    alert(args.messageText);\n  }\n}\n\n//function that increments count\nconst incrementCount = () => {\n  console.log(\"incrementCount function triggered on parent!\");\n  console.log($count);\n  count.set($count + 1);\n};\n\n//function that decrements count\nconst decrementCount = () => {\n  console.log(\"decrementCount function triggered on parent!\");\n  count.set($count - 1);\n};\n\n//message handler\nwindow.addEventListener(\"message\", function (message) {\n  //function adapter\n  const functionAdapter = {\n    displayMessage,\n    alertMessage,\n    incrementCount,\n    decrementCount,\n  };\n\n  if (message.origin === CHILD_URL) {\n    //sanity check\n    console.log(\"incoming message in parent MessageHandler from child!\");\n    console.log(message);\n\n    //parse input\n    functionName = message.data.function;\n    args = message.data.args;\n\n    //call appropriate function\n    if (functionAdapter[functionName]) {\n      functionAdapter[functionName](args);\n    } else {\n      throw new Error(\"invalid function name\");\n    }\n  } else if (message.origin === PARENT_URL) {\n    //sanity check\n    console.log(\"incoming message in parent MessageHandler from own URL\");\n  } else {\n    //permission denied\n    throw new Error(\"invalid parent URL, permission denied\");\n  }\n});\n</script>\n"]}}