{"sourcePath":"imports/ui/App.svelte","path":"imports/ui/App.svelte","data":"!function (module1) {\n  let SvelteComponentDev, add_location, append_dev, attr_dev, detach_dev, dispatch_dev, element, globals, init, insert_dev, listen_dev, noop, prevent_default, run_all, safe_not_equal, set_data_dev, set_input_value, space, src_url_equal, text, validate_slots;\n  module1.link(\"svelte/internal\", {\n    SvelteComponentDev(v) {\n      SvelteComponentDev = v;\n    },\n\n    add_location(v) {\n      add_location = v;\n    },\n\n    append_dev(v) {\n      append_dev = v;\n    },\n\n    attr_dev(v) {\n      attr_dev = v;\n    },\n\n    detach_dev(v) {\n      detach_dev = v;\n    },\n\n    dispatch_dev(v) {\n      dispatch_dev = v;\n    },\n\n    element(v) {\n      element = v;\n    },\n\n    globals(v) {\n      globals = v;\n    },\n\n    init(v) {\n      init = v;\n    },\n\n    insert_dev(v) {\n      insert_dev = v;\n    },\n\n    listen_dev(v) {\n      listen_dev = v;\n    },\n\n    noop(v) {\n      noop = v;\n    },\n\n    prevent_default(v) {\n      prevent_default = v;\n    },\n\n    run_all(v) {\n      run_all = v;\n    },\n\n    safe_not_equal(v) {\n      safe_not_equal = v;\n    },\n\n    set_data_dev(v) {\n      set_data_dev = v;\n    },\n\n    set_input_value(v) {\n      set_input_value = v;\n    },\n\n    space(v) {\n      space = v;\n    },\n\n    src_url_equal(v) {\n      src_url_equal = v;\n    },\n\n    text(v) {\n      text = v;\n    },\n\n    validate_slots(v) {\n      validate_slots = v;\n    }\n\n  }, 0);\n\n  let ___SVELTE_HMR_HOT_API;\n\n  module1.link(\"meteor/zodern:melte/hmr-runtime.js\", {\n    \"*\"(v) {\n      ___SVELTE_HMR_HOT_API = v;\n    }\n\n  }, 1);\n\n  let ___SVELTE_HMR_HOT_API_PROXY_ADAPTER;\n\n  module1.link(\"meteor/zodern:melte/proxy-adapter.js\", {\n    adapter(v) {\n      ___SVELTE_HMR_HOT_API_PROXY_ADAPTER = v;\n    }\n\n  }, 2);\n  const {\n    console: console_1\n  } = globals;\n  const file = \"imports/ui/App.svelte\"; // (39:2) {:else}\n\n  function create_else_block(ctx) {\n    let h2;\n    let t0;\n    let t1;\n    const block = {\n      c: function create() {\n        h2 = element(\"h2\");\n        t0 = text(\"Message received: \");\n        t1 = text(\n        /*incomingMessageText*/\n        ctx[1]);\n        add_location(h2, file, 39, 4, 1124);\n      },\n      m: function mount(target, anchor) {\n        insert_dev(target, h2, anchor);\n        append_dev(h2, t0);\n        append_dev(h2, t1);\n      },\n      p: function update(ctx, dirty) {\n        if (dirty &\n        /*incomingMessageText*/\n        2) set_data_dev(t1,\n        /*incomingMessageText*/\n        ctx[1]);\n      },\n      d: function destroy(detaching) {\n        if (detaching) detach_dev(h2);\n      }\n    };\n    dispatch_dev(\"SvelteRegisterBlock\", {\n      block,\n      id: create_else_block.name,\n      type: \"else\",\n      source: \"(39:2) {:else}\",\n      ctx\n    });\n    return block;\n  } // (37:2) {#if (!incomingMessageText)}\n\n\n  function create_if_block(ctx) {\n    let h2;\n    const block = {\n      c: function create() {\n        h2 = element(\"h2\");\n        h2.textContent = \"Listening for messages...\";\n        add_location(h2, file, 37, 4, 1075);\n      },\n      m: function mount(target, anchor) {\n        insert_dev(target, h2, anchor);\n      },\n      p: noop,\n      d: function destroy(detaching) {\n        if (detaching) detach_dev(h2);\n      }\n    };\n    dispatch_dev(\"SvelteRegisterBlock\", {\n      block,\n      id: create_if_block.name,\n      type: \"if\",\n      source: \"(37:2) {#if (!incomingMessageText)}\",\n      ctx\n    });\n    return block;\n  }\n\n  function create_fragment(ctx) {\n    let div;\n    let h1;\n    let t1;\n    let t2;\n    let form;\n    let label;\n    let t4;\n    let br;\n    let t5;\n    let input;\n    let t6;\n    let button;\n    let t8;\n    let iframe;\n    let iframe_src_value;\n    let mounted;\n    let dispose;\n\n    function select_block_type(ctx, dirty) {\n      if (!\n      /*incomingMessageText*/\n      ctx[1]) return create_if_block;\n      return create_else_block;\n    }\n\n    let current_block_type = select_block_type(ctx, -1);\n    let if_block = current_block_type(ctx);\n    const block = {\n      c: function create() {\n        div = element(\"div\");\n        h1 = element(\"h1\");\n        h1.textContent = \"Svelte Parent App\";\n        t1 = space();\n        if_block.c();\n        t2 = space();\n        form = element(\"form\");\n        label = element(\"label\");\n        label.textContent = \"Send a message to the child app:\";\n        t4 = space();\n        br = element(\"br\");\n        t5 = space();\n        input = element(\"input\");\n        t6 = space();\n        button = element(\"button\");\n        button.textContent = \"Send Message\";\n        t8 = space();\n        iframe = element(\"iframe\");\n        add_location(h1, file, 35, 2, 1013);\n        attr_dev(label, \"for\", \"html\");\n        add_location(label, file, 43, 4, 1235);\n        add_location(br, file, 44, 4, 1299);\n        attr_dev(input, \"type\", \"text\");\n        attr_dev(input, \"name\", \"text\");\n        attr_dev(input, \"placeholder\", \"Type message to send\");\n        add_location(input, file, 45, 4, 1310);\n        attr_dev(button, \"type\", \"submit\");\n        add_location(button, file, 46, 4, 1415);\n        add_location(form, file, 42, 2, 1184);\n        attr_dev(iframe, \"id\", \"iframe\");\n        attr_dev(iframe, \"title\", \"react-child-app\");\n        if (!src_url_equal(iframe.src, iframe_src_value = \"http://localhost:3000/\")) attr_dev(iframe, \"src\", iframe_src_value);\n        attr_dev(iframe, \"sandbox\", \"allow-same-origin allow-scripts allow-forms allow-top-navigation\");\n        add_location(iframe, file, 49, 2, 1472);\n        attr_dev(div, \"class\", \"container\");\n        add_location(div, file, 34, 0, 987);\n      },\n      l: function claim(nodes) {\n        throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n      },\n      m: function mount(target, anchor) {\n        insert_dev(target, div, anchor);\n        append_dev(div, h1);\n        append_dev(div, t1);\n        if_block.m(div, null);\n        append_dev(div, t2);\n        append_dev(div, form);\n        append_dev(form, label);\n        append_dev(form, t4);\n        append_dev(form, br);\n        append_dev(form, t5);\n        append_dev(form, input);\n        set_input_value(input,\n        /*outgoingMessageText*/\n        ctx[0]);\n        append_dev(form, t6);\n        append_dev(form, button);\n        append_dev(div, t8);\n        append_dev(div, iframe);\n\n        if (!mounted) {\n          dispose = [listen_dev(input, \"input\",\n          /*input_input_handler*/\n          ctx[4]), listen_dev(form, \"submit\", prevent_default(\n          /*handleSubmit*/\n          ctx[3]), false, true, false), listen_dev(iframe, \"load\",\n          /*oniFrameLoad*/\n          ctx[2], false, false, false)];\n          mounted = true;\n        }\n      },\n      p: function update(ctx, _ref) {\n        let [dirty] = _ref;\n\n        if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {\n          if_block.p(ctx, dirty);\n        } else {\n          if_block.d(1);\n          if_block = current_block_type(ctx);\n\n          if (if_block) {\n            if_block.c();\n            if_block.m(div, t2);\n          }\n        }\n\n        if (dirty &\n        /*outgoingMessageText*/\n        1 && input.value !==\n        /*outgoingMessageText*/\n        ctx[0]) {\n          set_input_value(input,\n          /*outgoingMessageText*/\n          ctx[0]);\n        }\n      },\n      i: noop,\n      o: noop,\n      d: function destroy(detaching) {\n        if (detaching) detach_dev(div);\n        if_block.d();\n        mounted = false;\n        run_all(dispose);\n      }\n    };\n    dispatch_dev(\"SvelteRegisterBlock\", {\n      block,\n      id: create_fragment.name,\n      type: \"component\",\n      source: \"\",\n      ctx\n    });\n    return block;\n  }\n\n  function instance($$self, $$props, $$invalidate) {\n    let incomingMessageText;\n    let {\n      $$slots: slots = {},\n      $$scope\n    } = $$props;\n    validate_slots('App', slots, []);\n    let iFrameLoaded = false;\n    let outgoingMessageText = \"\"; //verify that iFrame has loaded\n\n    const oniFrameLoad = () => {\n      iFrameLoaded = true;\n      console.log('child iFrame loaded, logging from parent!');\n    };\n\n    window.addEventListener(\"message\", function (message) {\n      if (message.origin === \"http://localhost:3000\") {\n        console.log(\"incoming messsage in parent from child!\");\n        console.log(message);\n        $$invalidate(1, incomingMessageText = message.data);\n      }\n    }); //event handler to send message to child app\n\n    const handleSubmit = () => {\n      //check that iFrame has loaded before accessing it and sending message\n      if (iFrameLoaded) {\n        console.log('Sending message from parent to child!');\n        document.getElementById('iframe').contentWindow.postMessage({\n          function: 'test',\n          args: {\n            messageText: outgoingMessageText\n          }\n        }, \"http://localhost:3000/\");\n      } else {\n        console.log('iFrame not loaded yet!');\n      }\n    };\n\n    const writable_props = [];\n    Object.keys($$props).forEach(key => {\n      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(\"<App> was created with unknown prop '\".concat(key, \"'\"));\n    });\n\n    function input_input_handler() {\n      outgoingMessageText = this.value;\n      $$invalidate(0, outgoingMessageText);\n    }\n\n    $$self.$capture_state = () => ({\n      iFrameLoaded,\n      outgoingMessageText,\n      oniFrameLoad,\n      handleSubmit,\n      incomingMessageText\n    });\n\n    $$self.$inject_state = $$props => {\n      if ('iFrameLoaded' in $$props) iFrameLoaded = $$props.iFrameLoaded;\n      if ('outgoingMessageText' in $$props) $$invalidate(0, outgoingMessageText = $$props.outgoingMessageText);\n      if ('incomingMessageText' in $$props) $$invalidate(1, incomingMessageText = $$props.incomingMessageText);\n    };\n\n    if ($$props && \"$$inject\" in $$props) {\n      $$self.$inject_state($$props.$$inject);\n    }\n\n    $: $$invalidate(1, incomingMessageText = \"\");\n\n    return [outgoingMessageText, incomingMessageText, oniFrameLoad, handleSubmit, input_input_handler];\n  }\n\n  class App extends SvelteComponentDev {\n    constructor(options) {\n      super(options);\n      init(this, options, instance, create_fragment, safe_not_equal, {});\n      dispatch_dev(\"SvelteRegisterComponent\", {\n        component: this,\n        tagName: \"App\",\n        options,\n        id: create_fragment.name\n      });\n    }\n\n  }\n\n  if (module && module.hot) {\n    App = ___SVELTE_HMR_HOT_API.applyHmr({\n      m: module,\n      id: \"imports/ui/App.svelte\",\n      hotOptions: {\n        \"preserveLocalState\": false,\n        \"noPreserveStateKey\": [\"@hmr:reset\", \"@!hmr\"],\n        \"preserveAllLocalStateKey\": \"@hmr:keep-all\",\n        \"preserveLocalStateKey\": \"@hmr:keep\",\n        \"noReload\": false,\n        \"optimistic\": true,\n        \"acceptNamedExports\": true,\n        \"acceptAccessors\": true,\n        \"injectCss\": true,\n        \"cssEjectDelay\": 100,\n        \"native\": false,\n        \"importAdapterName\": \"___SVELTE_HMR_HOT_API_PROXY_ADAPTER\",\n        \"noOverlay\": false\n      },\n      Component: App,\n      ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER,\n      acceptable: true,\n      preserveLocalState: false,\n      cssId: undefined,\n      nonCssHash: undefined,\n      ignoreCss: false\n    });\n  }\n\n  module1.exportDefault(App);\n}.call(this, module);","sourceMap":{"version":3,"sources":["App.svelte"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCI,QAAA,UAAA,CAAA,MAAA,EAAgD,EAAhD,EAAgD,MAAhD,CAAA","sourcesContent":["<script>\n  let iFrameLoaded = false;\n  let outgoingMessageText = \"\";\n  $: incomingMessageText = \"\";\n\n  //verify that iFrame has loaded\n  const oniFrameLoad = () => {\n    iFrameLoaded = true;\n    console.log('child iFrame loaded, logging from parent!');\n  }\n\n  window.addEventListener(\"message\", function (message) {\n    if (message.origin === \"http://localhost:3000\") {\n      console.log(\"incoming messsage in parent from child!\");\n      console.log(message);\n      incomingMessageText = message.data;\n    }\n  });\n\n  //event handler to send message to child app\n  const handleSubmit = () => {\n    //check that iFrame has loaded before accessing it and sending message\n    if(iFrameLoaded){\n      console.log('Sending message from parent to child!');\n      document.getElementById('iframe').contentWindow.postMessage({function: 'test', args: {messageText: outgoingMessageText}}, \"http://localhost:3000/\")\n    }\n    else{\n      console.log('iFrame not loaded yet!')\n    }\n  }\n\n</script>\n\n\n<div class=\"container\">\n  <h1>Svelte Parent App</h1>\n  {#if (!incomingMessageText)}\n    <h2>Listening for messages...</h2>\n  {:else}\n    <h2>Message received: {incomingMessageText}</h2>\n  {/if}\n\n  <form on:submit|preventDefault={handleSubmit}>\n    <label for=\"html\">Send a message to the child app: </label>\n    <br />\n    <input type=\"text\" name=\"text\" placeholder=\"Type message to send\" bind:value={outgoingMessageText}/>\n    <button type=\"submit\">Send Message</button>\n  </form>\n\n  <iframe on:load={oniFrameLoad} id='iframe' title=\"react-child-app\" src=\"http://localhost:3000/\" sandbox=\"allow-same-origin allow-scripts allow-forms allow-top-navigation\"></iframe>\n\n</div>\n\n"]}}