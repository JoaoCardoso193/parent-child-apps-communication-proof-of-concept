{"sourcePath":"imports/ui/Counter.svelte","path":"imports/ui/Counter.svelte","data":"!function (module1) {\n  let SvelteComponentDev, add_location, append_dev, component_subscribe, detach_dev, dispatch_dev, element, init, insert_dev, listen_dev, noop, run_all, safe_not_equal, set_data_dev, space, text, validate_slots, validate_store;\n  module1.link(\"svelte/internal\", {\n    SvelteComponentDev(v) {\n      SvelteComponentDev = v;\n    },\n\n    add_location(v) {\n      add_location = v;\n    },\n\n    append_dev(v) {\n      append_dev = v;\n    },\n\n    component_subscribe(v) {\n      component_subscribe = v;\n    },\n\n    detach_dev(v) {\n      detach_dev = v;\n    },\n\n    dispatch_dev(v) {\n      dispatch_dev = v;\n    },\n\n    element(v) {\n      element = v;\n    },\n\n    init(v) {\n      init = v;\n    },\n\n    insert_dev(v) {\n      insert_dev = v;\n    },\n\n    listen_dev(v) {\n      listen_dev = v;\n    },\n\n    noop(v) {\n      noop = v;\n    },\n\n    run_all(v) {\n      run_all = v;\n    },\n\n    safe_not_equal(v) {\n      safe_not_equal = v;\n    },\n\n    set_data_dev(v) {\n      set_data_dev = v;\n    },\n\n    space(v) {\n      space = v;\n    },\n\n    text(v) {\n      text = v;\n    },\n\n    validate_slots(v) {\n      validate_slots = v;\n    },\n\n    validate_store(v) {\n      validate_store = v;\n    }\n\n  }, 0);\n  let count;\n  module1.link(\"/imports/api/stores\", {\n    count(v) {\n      count = v;\n    }\n\n  }, 1);\n\n  let ___SVELTE_HMR_HOT_API;\n\n  module1.link(\"meteor/zodern:melte/hmr-runtime.js\", {\n    \"*\"(v) {\n      ___SVELTE_HMR_HOT_API = v;\n    }\n\n  }, 2);\n\n  let ___SVELTE_HMR_HOT_API_PROXY_ADAPTER;\n\n  module1.link(\"meteor/zodern:melte/proxy-adapter.js\", {\n    adapter(v) {\n      ___SVELTE_HMR_HOT_API_PROXY_ADAPTER = v;\n    }\n\n  }, 3);\n  const file = \"imports/ui/Counter.svelte\";\n\n  function create_fragment(ctx) {\n    let div;\n    let h2;\n    let t0;\n    let t1;\n    let t2;\n    let button0;\n    let t4;\n    let button1;\n    let mounted;\n    let dispose;\n    const block = {\n      c: function create() {\n        div = element(\"div\");\n        h2 = element(\"h2\");\n        t0 = text(\"The current count is: \");\n        t1 = text(\n        /*$count*/\n        ctx[0]);\n        t2 = space();\n        button0 = element(\"button\");\n        button0.textContent = \"+\";\n        t4 = space();\n        button1 = element(\"button\");\n        button1.textContent = \"-\";\n        add_location(h2, file, 5, 4, 77);\n        add_location(button0, file, 6, 4, 121);\n        add_location(button1, file, 14, 4, 226);\n        add_location(div, file, 4, 0, 67);\n      },\n      l: function claim(nodes) {\n        throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n      },\n      m: function mount(target, anchor) {\n        insert_dev(target, div, anchor);\n        append_dev(div, h2);\n        append_dev(h2, t0);\n        append_dev(h2, t1);\n        append_dev(div, t2);\n        append_dev(div, button0);\n        append_dev(div, t4);\n        append_dev(div, button1);\n\n        if (!mounted) {\n          dispose = [listen_dev(button0, \"click\",\n          /*click_handler*/\n          ctx[1], false, false, false), listen_dev(button1, \"click\",\n          /*click_handler_1*/\n          ctx[2], false, false, false)];\n          mounted = true;\n        }\n      },\n      p: function update(ctx, _ref) {\n        let [dirty] = _ref;\n        if (dirty &\n        /*$count*/\n        1) set_data_dev(t1,\n        /*$count*/\n        ctx[0]);\n      },\n      i: noop,\n      o: noop,\n      d: function destroy(detaching) {\n        if (detaching) detach_dev(div);\n        mounted = false;\n        run_all(dispose);\n      }\n    };\n    dispatch_dev(\"SvelteRegisterBlock\", {\n      block,\n      id: create_fragment.name,\n      type: \"component\",\n      source: \"\",\n      ctx\n    });\n    return block;\n  }\n\n  function instance($$self, $$props, $$invalidate) {\n    let $count;\n    validate_store(count, 'count');\n    component_subscribe($$self, count, $$value => $$invalidate(0, $count = $$value));\n    let {\n      $$slots: slots = {},\n      $$scope\n    } = $$props;\n    validate_slots('Counter', slots, []);\n    const writable_props = [];\n    Object.keys($$props).forEach(key => {\n      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(\"<Counter> was created with unknown prop '\".concat(key, \"'\"));\n    });\n\n    const click_handler = () => {\n      count.set($count + 1);\n    };\n\n    const click_handler_1 = () => {\n      count.set($count - 1);\n    };\n\n    $$self.$capture_state = () => ({\n      count,\n      $count\n    });\n\n    return [$count, click_handler, click_handler_1];\n  }\n\n  class Counter extends SvelteComponentDev {\n    constructor(options) {\n      super(options);\n      init(this, options, instance, create_fragment, safe_not_equal, {});\n      dispatch_dev(\"SvelteRegisterComponent\", {\n        component: this,\n        tagName: \"Counter\",\n        options,\n        id: create_fragment.name\n      });\n    }\n\n  }\n\n  if (module && module.hot) {\n    Counter = ___SVELTE_HMR_HOT_API.applyHmr({\n      m: module,\n      id: \"imports/ui/Counter.svelte\",\n      hotOptions: {\n        \"preserveLocalState\": false,\n        \"noPreserveStateKey\": [\"@hmr:reset\", \"@!hmr\"],\n        \"preserveAllLocalStateKey\": \"@hmr:keep-all\",\n        \"preserveLocalStateKey\": \"@hmr:keep\",\n        \"noReload\": false,\n        \"optimistic\": true,\n        \"acceptNamedExports\": true,\n        \"acceptAccessors\": true,\n        \"injectCss\": true,\n        \"cssEjectDelay\": 100,\n        \"native\": false,\n        \"importAdapterName\": \"___SVELTE_HMR_HOT_API_PROXY_ADAPTER\",\n        \"noOverlay\": false\n      },\n      Component: Counter,\n      ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER,\n      acceptable: true,\n      preserveLocalState: false,\n      cssId: undefined,\n      nonCssHash: undefined,\n      ignoreCss: false\n    });\n  }\n\n  module1.exportDefault(Counter);\n}.call(this, module);","sourceMap":{"version":3,"sources":[],"names":[],"mappings":""}}