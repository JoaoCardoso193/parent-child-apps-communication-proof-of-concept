{"sourcePath":"imports/api/ChildToParentAPI.svelte","path":"imports/api/ChildToParentAPI.svelte","data":"var _assertThisInitialized;\n\nmodule.link(\"@babel/runtime/helpers/assertThisInitialized\", {\n  default: function (v) {\n    _assertThisInitialized = v;\n  }\n}, 0);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\nvar SvelteComponentDev, component_subscribe, dispatch_dev, globals, init, noop, safe_not_equal, validate_slots, validate_store;\nmodule.link(\"svelte/internal\", {\n  SvelteComponentDev: function (v) {\n    SvelteComponentDev = v;\n  },\n  component_subscribe: function (v) {\n    component_subscribe = v;\n  },\n  dispatch_dev: function (v) {\n    dispatch_dev = v;\n  },\n  globals: function (v) {\n    globals = v;\n  },\n  init: function (v) {\n    init = v;\n  },\n  noop: function (v) {\n    noop = v;\n  },\n  safe_not_equal: function (v) {\n    safe_not_equal = v;\n  },\n  validate_slots: function (v) {\n    validate_slots = v;\n  },\n  validate_store: function (v) {\n    validate_store = v;\n  }\n}, 0);\nvar PARENT_URL, CHILD_URL;\nmodule.link(\"/public/constants\", {\n  PARENT_URL: function (v) {\n    PARENT_URL = v;\n  },\n  CHILD_URL: function (v) {\n    CHILD_URL = v;\n  }\n}, 1);\nvar incomingMessageText, count;\nmodule.link(\"/imports/api/stores\", {\n  incomingMessageText: function (v) {\n    incomingMessageText = v;\n  },\n  count: function (v) {\n    count = v;\n  }\n}, 2);\nvar _globals = globals,\n    Error_1 = _globals.Error,\n    console_1 = _globals.console;\nvar file = \"imports/api/ChildToParentAPI.svelte\";\n\nfunction create_fragment(ctx) {\n  var block = {\n    c: noop,\n    l: function () {\n      function claim(nodes) {\n        throw new Error_1(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n      }\n\n      return claim;\n    }(),\n    m: noop,\n    p: noop,\n    i: noop,\n    o: noop,\n    d: noop\n  };\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx: ctx\n  });\n  return block;\n}\n\nfunction alertMessage(args) {\n  //sanity check\n  console.log(\"alertMessage function triggered on parent with args \" + args + \"!\"); //check args and alert\n\n  if (typeof args.messageText === \"string\") {\n    alert(args.messageText);\n  }\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n  var $count;\n  validate_store(count, 'count');\n  component_subscribe($$self, count, function ($$value) {\n    return $$invalidate(0, $count = $$value);\n  });\n  var _$$props$$$slots = $$props.$$slots,\n      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,\n      $$scope = $$props.$$scope;\n  validate_slots('ChildToParentAPI', slots, []);\n\n  function displayMessage(args) {\n    //sanity check\n    console.log(\"displayMessage function triggered on parent with args \" + args + \"!\"); //check messageText is string\n\n    if (typeof args.messageText === \"string\") {\n      incomingMessageText.set(args.messageText);\n    }\n  } //function that increments count\n\n\n  var incrementCount = function () {\n    console.log(\"incrementCount function triggered on parent!\");\n    console.log($count);\n    count.set($count + 1);\n  }; //function that decrements count\n\n\n  var decrementCount = function () {\n    console.log(\"decrementCount function triggered on parent!\");\n    count.set($count - 1);\n  }; //message handler\n\n\n  window.addEventListener(\"message\", function (message) {\n    //function adapter\n    var functionAdapter = {\n      displayMessage: displayMessage,\n      alertMessage: alertMessage,\n      incrementCount: incrementCount,\n      decrementCount: decrementCount\n    };\n\n    if (message.origin === CHILD_URL) {\n      //sanity check\n      console.log(\"incoming message in parent MessageHandler from child!\");\n      console.log(message); //parse input\n\n      functionName = message.data.function;\n      args = message.data.args; //call appropriate function\n\n      if (functionAdapter[functionName]) {\n        functionAdapter[functionName](args);\n      } else {\n        throw new Error(\"invalid function name\");\n      }\n    } else if (message.origin === PARENT_URL) {\n      //sanity check\n      console.log(\"incoming message in parent MessageHandler from own URL\");\n    } else {\n      //permission denied\n      throw new Error(\"invalid parent URL, permission denied\");\n    }\n  });\n  var writable_props = [];\n  Object.keys($$props).forEach(function (key) {\n    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(\"<ChildToParentAPI> was created with unknown prop '\" + key + \"'\");\n  });\n\n  $$self.$capture_state = function () {\n    return {\n      PARENT_URL: PARENT_URL,\n      CHILD_URL: CHILD_URL,\n      incomingMessageText: incomingMessageText,\n      count: count,\n      displayMessage: displayMessage,\n      alertMessage: alertMessage,\n      incrementCount: incrementCount,\n      decrementCount: decrementCount,\n      $count: $count\n    };\n  };\n\n  return [];\n}\n\nvar ChildToParentAPI = /*#__PURE__*/function (_SvelteComponentDev) {\n  _inheritsLoose(ChildToParentAPI, _SvelteComponentDev);\n\n  function ChildToParentAPI(options) {\n    var _this;\n\n    _this = _SvelteComponentDev.call(this, options) || this;\n    init(_assertThisInitialized(_this), options, instance, create_fragment, safe_not_equal, {});\n    dispatch_dev(\"SvelteRegisterComponent\", {\n      component: _assertThisInitialized(_this),\n      tagName: \"ChildToParentAPI\",\n      options: options,\n      id: create_fragment.name\n    });\n    return _this;\n  }\n\n  return ChildToParentAPI;\n}(SvelteComponentDev);\n\nmodule.exportDefault(ChildToParentAPI);","sourceMap":{"version":3,"sources":["ChildToParentAPI.svelte"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAgB0B;;SAExB,CAAA,6DAAW,YAFa;;;;;;;;;;;;;;;;;;0BAXH,MAAA;;WAErB,CAAQ,+DAAA,YAFa;;eAKV,IAAA,CAAA,gBAAgB,UAAa;yBACtC,CAAA,IAAA,IAAA,CAAA;;;;;;AAiBF,IAAA,OAAA,CAAA,GAAA,CAAA,8CAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,MAAA","sourcesContent":["<script>\nimport { PARENT_URL, CHILD_URL } from \"/public/constants\";\nimport { incomingMessageText, count } from \"/imports/api/stores\";\n\n//function that displays message, takes in a \"messageText\" argument\nfunction displayMessage(args) {\n  //sanity check\n  console.log(`displayMessage function triggered on parent with args ${args}!`);\n\n  //check messageText is string\n  if (typeof args.messageText === \"string\") {\n    incomingMessageText.set(args.messageText);\n  }\n}\n\n//function that alerts message, takes in a \"messageText\" argument\nfunction alertMessage(args) {\n  //sanity check\n  console.log(`alertMessage function triggered on parent with args ${args}!`);\n\n  //check args and alert\n  if (typeof args.messageText === \"string\") {\n    alert(args.messageText);\n  }\n}\n\n//function that increments count\nconst incrementCount = () => {\n  console.log(\"incrementCount function triggered on parent!\");\n  console.log($count);\n  count.set($count + 1);\n};\n\n//function that decrements count\nconst decrementCount = () => {\n  console.log(\"decrementCount function triggered on parent!\");\n  count.set($count - 1);\n};\n\n//message handler\nwindow.addEventListener(\"message\", function (message) {\n  //function adapter\n  const functionAdapter = {\n    displayMessage,\n    alertMessage,\n    incrementCount,\n    decrementCount,\n  };\n\n  if (message.origin === CHILD_URL) {\n    //sanity check\n    console.log(\"incoming message in parent MessageHandler from child!\");\n    console.log(message);\n\n    //parse input\n    functionName = message.data.function;\n    args = message.data.args;\n\n    //call appropriate function\n    if (functionAdapter[functionName]) {\n      functionAdapter[functionName](args);\n    } else {\n      throw new Error(\"invalid function name\");\n    }\n  } else if (message.origin === PARENT_URL) {\n    //sanity check\n    console.log(\"incoming message in parent MessageHandler from own URL\");\n  } else {\n    //permission denied\n    throw new Error(\"invalid parent URL, permission denied\");\n  }\n});\n</script>\n"]}}