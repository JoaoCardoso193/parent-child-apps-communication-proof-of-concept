{"sourcePath":"imports/ui/Message.svelte","path":"imports/ui/Message.svelte","data":"var _assertThisInitialized;\n\nmodule.link(\"@babel/runtime/helpers/assertThisInitialized\", {\n  default: function (v) {\n    _assertThisInitialized = v;\n  }\n}, 0);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\n\nvar _slicedToArray;\n\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 2);\nvar SvelteComponentDev, add_location, append_dev, component_subscribe, detach_dev, dispatch_dev, element, empty, init, insert_dev, noop, safe_not_equal, set_data_dev, text, validate_slots, validate_store;\nmodule.link(\"svelte/internal\", {\n  SvelteComponentDev: function (v) {\n    SvelteComponentDev = v;\n  },\n  add_location: function (v) {\n    add_location = v;\n  },\n  append_dev: function (v) {\n    append_dev = v;\n  },\n  component_subscribe: function (v) {\n    component_subscribe = v;\n  },\n  detach_dev: function (v) {\n    detach_dev = v;\n  },\n  dispatch_dev: function (v) {\n    dispatch_dev = v;\n  },\n  element: function (v) {\n    element = v;\n  },\n  empty: function (v) {\n    empty = v;\n  },\n  init: function (v) {\n    init = v;\n  },\n  insert_dev: function (v) {\n    insert_dev = v;\n  },\n  noop: function (v) {\n    noop = v;\n  },\n  safe_not_equal: function (v) {\n    safe_not_equal = v;\n  },\n  set_data_dev: function (v) {\n    set_data_dev = v;\n  },\n  text: function (v) {\n    text = v;\n  },\n  validate_slots: function (v) {\n    validate_slots = v;\n  },\n  validate_store: function (v) {\n    validate_store = v;\n  }\n}, 0);\nvar incomingMessageText;\nmodule.link(\"/imports/api/stores\", {\n  incomingMessageText: function (v) {\n    incomingMessageText = v;\n  }\n}, 1);\nvar file = \"imports/ui/Message.svelte\"; // (7:0) {:else}\n\nfunction create_else_block(ctx) {\n  var h2;\n  var t0;\n  var t1;\n  var block = {\n    c: function () {\n      function create() {\n        h2 = element(\"h2\");\n        t0 = text(\"Message received: \");\n        t1 = text(\n        /*$incomingMessageText*/\n        ctx[0]);\n        add_location(h2, file, 7, 2, 159);\n      }\n\n      return create;\n    }(),\n    m: function () {\n      function mount(target, anchor) {\n        insert_dev(target, h2, anchor);\n        append_dev(h2, t0);\n        append_dev(h2, t1);\n      }\n\n      return mount;\n    }(),\n    p: function () {\n      function update(ctx, dirty) {\n        if (dirty &\n        /*$incomingMessageText*/\n        1) set_data_dev(t1,\n        /*$incomingMessageText*/\n        ctx[0]);\n      }\n\n      return update;\n    }(),\n    d: function () {\n      function destroy(detaching) {\n        if (detaching) detach_dev(h2);\n      }\n\n      return destroy;\n    }()\n  };\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_else_block.name,\n    type: \"else\",\n    source: \"(7:0) {:else}\",\n    ctx: ctx\n  });\n  return block;\n} // (5:0) {#if (!$incomingMessageText)}\n\n\nfunction create_if_block(ctx) {\n  var h2;\n  var block = {\n    c: function () {\n      function create() {\n        h2 = element(\"h2\");\n        h2.textContent = \"Listening for messages...\";\n        add_location(h2, file, 5, 2, 114);\n      }\n\n      return create;\n    }(),\n    m: function () {\n      function mount(target, anchor) {\n        insert_dev(target, h2, anchor);\n      }\n\n      return mount;\n    }(),\n    p: noop,\n    d: function () {\n      function destroy(detaching) {\n        if (detaching) detach_dev(h2);\n      }\n\n      return destroy;\n    }()\n  };\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_if_block.name,\n    type: \"if\",\n    source: \"(5:0) {#if (!$incomingMessageText)}\",\n    ctx: ctx\n  });\n  return block;\n}\n\nfunction create_fragment(ctx) {\n  var if_block_anchor;\n\n  function select_block_type(ctx, dirty) {\n    if (!\n    /*$incomingMessageText*/\n    ctx[0]) return create_if_block;\n    return create_else_block;\n  }\n\n  var current_block_type = select_block_type(ctx, -1);\n  var if_block = current_block_type(ctx);\n  var block = {\n    c: function () {\n      function create() {\n        if_block.c();\n        if_block_anchor = empty();\n      }\n\n      return create;\n    }(),\n    l: function () {\n      function claim(nodes) {\n        throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n      }\n\n      return claim;\n    }(),\n    m: function () {\n      function mount(target, anchor) {\n        if_block.m(target, anchor);\n        insert_dev(target, if_block_anchor, anchor);\n      }\n\n      return mount;\n    }(),\n    p: function () {\n      function update(ctx, _ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            dirty = _ref2[0];\n\n        if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {\n          if_block.p(ctx, dirty);\n        } else {\n          if_block.d(1);\n          if_block = current_block_type(ctx);\n\n          if (if_block) {\n            if_block.c();\n            if_block.m(if_block_anchor.parentNode, if_block_anchor);\n          }\n        }\n      }\n\n      return update;\n    }(),\n    i: noop,\n    o: noop,\n    d: function () {\n      function destroy(detaching) {\n        if_block.d(detaching);\n        if (detaching) detach_dev(if_block_anchor);\n      }\n\n      return destroy;\n    }()\n  };\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block: block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx: ctx\n  });\n  return block;\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n  var $incomingMessageText;\n  validate_store(incomingMessageText, 'incomingMessageText');\n  component_subscribe($$self, incomingMessageText, function ($$value) {\n    return $$invalidate(0, $incomingMessageText = $$value);\n  });\n  var _$$props$$$slots = $$props.$$slots,\n      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,\n      $$scope = $$props.$$scope;\n  validate_slots('Message', slots, []);\n  var writable_props = [];\n  Object.keys($$props).forEach(function (key) {\n    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(\"<Message> was created with unknown prop '\" + key + \"'\");\n  });\n\n  $$self.$capture_state = function () {\n    return {\n      incomingMessageText: incomingMessageText,\n      $incomingMessageText: $incomingMessageText\n    };\n  };\n\n  return [$incomingMessageText];\n}\n\nvar Message = /*#__PURE__*/function (_SvelteComponentDev) {\n  _inheritsLoose(Message, _SvelteComponentDev);\n\n  function Message(options) {\n    var _this;\n\n    _this = _SvelteComponentDev.call(this, options) || this;\n    init(_assertThisInitialized(_this), options, instance, create_fragment, safe_not_equal, {});\n    dispatch_dev(\"SvelteRegisterComponent\", {\n      component: _assertThisInitialized(_this),\n      tagName: \"Message\",\n      options: options,\n      id: create_fragment.name\n    });\n    return _this;\n  }\n\n  return Message;\n}(SvelteComponentDev);\n\nmodule.exportDefault(Message);","sourceMap":{"version":3,"sources":[],"names":[],"mappings":""}}